permissions:
  - '*'
sessions:
  openvscode:
    redirect: true


jobs:
  main:
    steps:
      - name: Preprocessing
        run: ./utils/steps/preprocessing.sh 
      - name: Validating Target Resource
        run: ./utils/steps/input_form_resource_wrapper.sh
      - name: Process Inputs
        run: ./utils/steps/process_inputs_sh.sh 
      - name: Controller Preprocessing
        run: ./utils/steps/controller_preprocessing.sh
      - name: Initialize Cancel Script
        run: ./utils/steps/initialize_cancel_script_v3.sh

      - name: Create Controller Session Script
        if: ${{ 'CONTROLLER' === inputs.pwrl_host.jobschedulertype }}
        run: ./utils/steps/create_session_script_controller.sh
      - name: Launch and Monitor Controller Job
        if: ${{ 'CONTROLLER' === inputs.pwrl_host.jobschedulertype }}
        run: ./utils/steps/launch_and_monitor_controller_job.sh
        cleanup: ./kill.sh

      - name: Create Compute Session Script
        if: ${{ 'CONTROLLER' !== inputs.pwrl_host.jobschedulertype }}
        run: ./utils/steps/create_session_script_compute.sh
      - name:  Launch and Monitor Compute Job
        if: ${{ 'CONTROLLER' !== inputs.pwrl_host.jobschedulertype }}
        run: ./utils/steps/utils/steps/launch_and_monitor_compute_job.sh
        cleanup: ./kill.sh
      - name: Clean and Exit
        run: ./utils/steps/clean_and_exit.sh

  create_session:
    steps:
      - name: Set Session Name
        run: |
          session_name=$(pwd | rev | cut -d'/' -f1-2 | tr '/' '-' | rev)
          echo "session_name=${session_name}" | tee -a $OUTPUTS
      - name: Get Controller Hostname
        if: ${{ 'CONTROLLER' === inputs.pwrl_host.jobschedulertype }}
        env:
          sshcmd: ssh -o StrictHostKeyChecking=no ${{ inputs.pwrl_host.resource.ip }}
        run: |
          target_hostname=$(${sshcmd} hostname)
          echo "target_hostname=${target_hostname}"  | tee -a $OUTPUTS
      - name: Get Compute Hostname
        if: ${{ 'SLURM' === inputs.pwrl_host.jobschedulertype }}
        env:
          sshcmd: ssh -o StrictHostKeyChecking=no ${{ inputs.pwrl_host.resource.ip }}
        run: |
          while true; do
            echo "Waiting for target hostname..."

            # Check if the service.port file exists and read its contents
            target_hostname=$(${sshcmd} "if [ -f ~/${PWD/#$HOME/}/target.hostname ]; then cat ~/${PWD/#$HOME/}/target.hostname; fi")

            # Exit the loop if file was found and read
            if [ -n "${target_hostname}" ]; then
              echo "Target's hostname found: ${target_hostname}"
              break
            fi

            # Wait before the next check
            sleep 5
          done
          target_hostname=$(${sshcmd} squeue -j "${job_id}" --noheader --format="%N")
          echo "target_hostname=${target_hostname}"  | tee -a $OUTPUTS

      - name: Get Remote Port
        env:
          sshcmd: ssh -o StrictHostKeyChecking=no ${{ inputs.pwrl_host.resource.ip }}
        run: |
          while true; do
            echo "Waiting for service port file..."

            # Check if the service.port file exists and read its contents
            remote_port=$(${sshcmd} "if [ -f ~/${PWD/#$HOME/}/service.port ]; then cat ~/${PWD/#$HOME/}/service.port; fi")

            # Exit the loop if remote_port is successfully set (file was found and read)
            if [ -n "$remote_port" ]; then
              echo "Service port found: $remote_port"
              break
            fi

            # Wait before the next check
            sleep 5
          done
          echo "remote_port=${remote_port}"  | tee -a $OUTPUTS
      - name: Expose port
        uses: parallelworks/update-session
        with:
          remotePort: "${{ needs.create_session.outputs.remote_port }}"
          status: running
          target: ${{ inputs.pwrl_host.resource.id }}
          name: ${{ sessions.openvscode }}

'on':
  execute:
    inputs:
      pwrl_host:
        type: group
        label: Server Host
        items:
          resource:
            type: compute-clusters
            label: Service host
            include-workspace: false
            tooltip:
              Resource to host the service
          nports:
            type: number
            label: Number of Ports to Reserve
            hidden: true
            default: 1
            optional: true
          jobschedulertype:
            type: dropdown
            label: Select Controller, SLURM Partition or PBS Queue
            default: CONTROLLER
            options:
              - value: CONTROLLER
                label: Controller
              - value: SLURM
                label: SLURM Partition
              - value: PBS
                label: PBS Queue
            tooltip:
              Job will be submitted using SSH, sbatch or qsub, respectively
          _sch__dd_partition_e_:
            type: slurm-partitions
            label: SLURM partition
            hidden: ${{ 'SLURM' !== inputs.pwrl_host.jobschedulertype }}
            ignore: ${{ .hidden }}
            optional: true
            tooltip:
                Partition to submit the interactive job. Leave empty to let SLURM pick
                the optimal option.
            resource: ${{ inputs.pwrl_host.resource }}
          scheduler_directives_slurm:
            type: string
            label: Scheduler directives
            hidden: ${{ 'SLURM' !== inputs.pwrl_host.jobschedulertype }}
            ignore: ${{ .hidden }}
            optional: true
            tooltip:
                e.g. --mem=1000;--gpus-per-node=1 - Use the semicolon character ; to
                separate parameters. Do not include the SBATCH keyword.
          _sch__d_q___:
            type: string
            label: PBS queue
            hidden: ${{ 'PBS' !== inputs.pwrl_host.jobschedulertype }}
            ignore: ${{ .hidden }}
            optional: ${{ .hidden }}
            tooltip:
                Queue to submit the interactive job. Must select one! Use [qstat -f
                -Q] to list all queues on the system
          scheduler_directives_pbs:
            type: string
            label: Scheduler directives
            hidden: ${{ 'PBS' !== inputs.pwrl_host.jobschedulertype }}
            ignore: ${{ .hidden }}
            optional: true
            tooltip:
                e.g. -l mem=1000;-l nodes=1:ppn=4 - Use the semicolon character ; to
                separate parameters. Do not include the PBS keyword.
        collapsed: false
      service:
        type: group
        label: VS Code Settings
        items:
          name: 
            type: string
            hidden: true
            default: openvscode
          download_url:
            label: Download URL
            type: string
            default: https://github.com/coder/code-server/releases/download/v4.92.2/code-server-4.92.2-linux-amd64.tar.gz
            tooltip: 
              Downloads or uses the code-server server version specified in the URL
          password:
            label: Password for IDE session
            type: string
            optional: true
            tooltip: 
              Enter password or leave blank for no password
          directory:
            label: Directory to open in VS Code
            type: string
            default: __WORKDIR__
            tooltip: 
              Directory to open in VS code
          github_token:
            label: GitHub authentication token
            type: string
            optional: true