permissions:
  - '*'
sessions:
  session:
    useTLS: false
    redirect: true
    prompt-for-name:
      default: ngencerf


jobs:
  preprocessing:
    steps:
      - name: Preprocessing
        run: ./utils/steps-v3/preprocessing/preprocessing.sh 
      - name: Validating Target Resource
        run: ./utils/steps-v3/preprocessing/input_form_resource_wrapper.sh ${{ inputs.pwrl_host.resource.ip }}
      - name: Process Inputs
        run: | 
          ./utils/steps-v3/preprocessing/process_inputs_sh.sh 
          echo "export basepath=/me/session/${PW_USER}/${{ sessions.session }}"  >> resources/host/inputs.sh
      - name: Transfer Files to Controller
        run: ./utils/steps-v3/preprocessing/transfer_files_to_controller.sh
      - name: Controller Preprocessing
        run: ./utils/steps-v3/preprocessing/controller_preprocessing.sh
      - name: Initialize Cancel Script
        run: ./utils/steps-v3/preprocessing/initialize_cancel_script.sh

  controller_job:
    needs:
       - preprocessing
    steps:
      - name: Create Controller Session Script
        if: ${{ 'CONTROLLER' === inputs.pwrl_host.jobschedulertype }}
        run: ./utils/steps-v3/controller/create_session_script.sh
      - name: Launch and Monitor Controller Job
        if: ${{ 'CONTROLLER' === inputs.pwrl_host.jobschedulertype }}
        run: ./utils/steps-v3/controller/launch_and_monitor_job.sh
        cleanup: |
          if [[ "${{ inputs.pwrl_host.jobschedulertype }}" == "CONTROLLER" ]]; then
            ./kill.sh
          fi
      - name: Clean and Exit
        if: ${{ 'CONTROLLER' === inputs.pwrl_host.jobschedulertype }}
        run: ./utils/steps-v3/clean_and_exit.sh

  compute_job:
    needs:
       - preprocessing
    steps:
      - name: Create Compute Session Script
        if: ${{ 'CONTROLLER' !== inputs.pwrl_host.jobschedulertype }}
        run: ./utils/steps-v3/compute/create_session_script.sh
      - name:  Launch and Monitor Compute Job
        if: ${{ 'CONTROLLER' !== inputs.pwrl_host.jobschedulertype }}
        run: ./utils/steps-v3/compute/launch_and_monitor_job.sh
        cleanup: |
          if [[ "${{ inputs.pwrl_host.jobschedulertype }}" != "CONTROLLER" ]]; then
            ./kill.sh
          fi
      - name: Clean and Exit
        if: ${{ 'CONTROLLER' !== inputs.pwrl_host.jobschedulertype }}
        run: ./utils/steps-v3/clean_and_exit.sh


  create_session:
    needs:
       - preprocessing
    steps:
      - name: Set Session Name
        run: |
          session_name=$(pwd | rev | cut -d'/' -f1-2 | tr '/' '-' | rev)
          echo "session_name=${session_name}" | tee -a $OUTPUTS
      - name: Get Controller Hostname
        if: ${{ 'CONTROLLER' === inputs.pwrl_host.jobschedulertype }}
        env:
          sshcmd: ssh -o StrictHostKeyChecking=no ${{ inputs.pwrl_host.resource.ip }}
        run: |
          target_hostname=$(${sshcmd} hostname)
          echo "target_hostname=${target_hostname}"  | tee -a $OUTPUTS
      - name: Get Compute Hostname
        if: ${{ 'SLURM' === inputs.pwrl_host.jobschedulertype }}
        env:
          sshcmd: ssh -o StrictHostKeyChecking=no ${{ inputs.pwrl_host.resource.ip }}
        run: |
          while true; do
            echo "Waiting for target hostname..."

            # Check if the service.port file exists and read its contents
            target_hostname=$(${sshcmd} "if [ -f ~/${PWD/#$HOME/}/target.hostname ]; then cat ~/${PWD/#$HOME/}/target.hostname; fi")

            # Exit the loop if file was found and read
            if [ -n "${target_hostname}" ]; then
              echo "Target's hostname found: ${target_hostname}"
              break
            fi

            # Wait before the next check
            sleep 5
          done
          target_hostname=$(${sshcmd} squeue -j "${job_id}" --noheader --format="%N")
          echo "target_hostname=${target_hostname}"  | tee -a $OUTPUTS

      - name: Get Remote Port
        env:
          sshcmd: ssh -o StrictHostKeyChecking=no ${{ inputs.pwrl_host.resource.ip }}
        run: |
          while true; do
            echo "Waiting for service port file..."

            # Check if the service.port file exists and read its contents
            remote_port=$(${sshcmd} "bash -c \"if [ -f ~/${PWD/#$HOME/}/service.port ]; then cat ~/${PWD/#$HOME/}/service.port; fi\"")

            # Exit the loop if remote_port is successfully set (file was found and read)
            if [ -n "$remote_port" ]; then
              echo "Service port found: $remote_port"
              break
            fi

            # Wait before the next check
            sleep 5
          done
          echo "remote_port=${remote_port}"  | tee -a $OUTPUTS
      - name: Select Local Port
        run: |
          local_port=$(pw agent open-port)
          echo "local_port=${local_port}"  | tee -a $OUTPUTS
      - name: Expose Port
        uses: parallelworks/update-session
        with:
          remotePort: "${{ needs.create_session.outputs.remote_port }}"
          localPort: "${{ needs.create_session.outputs.local_port }}"
          remoteHost: "${{ needs.create_session.outputs.target_hostname }}"
          status: running
          target: ${{ inputs.pwrl_host.resource.id }}
          name: ${{ sessions.session }}
        
'on':
  execute:
    inputs:
      use_screen:
        label: Use screen to run controller sessions
        type: boolean
        default: true
        hidden: true
      ngen_cal_singularity_container_path:
        label: Path to the ngen-cal singularity container
        type: string
        default: /ngencerf-app/singularity/ngen-cal.sif
        hidden: true
      container_data_dir:
        label: Path to the data directory within the container
        type: string
        default: /ngencerf/data/
        hidden: true
      local_data_dir:
        label: Path to the data directory on the cluster
        type: string
        default: /ngencerf-app/data/ngen-cal-data/
        hidden: true
      pwrl_host:
        type: group
        label: ngenCERF Host
        collapsed: false
        items:
          resource:
            type: compute-clusters
            label: Service host
            include-workspace: false
            tooltip:
              Resource to host the service
          jobschedulertype:
            type: dropdown
            label: Select Controller, SLURM Partition or PBS Queue
            default: CONTROLLER
            options:
              - value: CONTROLLER
                label: Controller
              - value: SLURM
                label: SLURM Partition
              - value: PBS
                label: PBS Queue
            hidden: true
            tooltip:
              Job will be submitted using SSH, sbatch or qsub, respectively
      service:
        type: group
        label: ngenCERF
        items:
          name: 
            type: string
            hidden: true
            default: ngencerf
          build:
            label: Build Docker Containers?
            type: boolean
            default: true
            tooltip: Select Yes to build the docker container running docker compose up --build
          ngencerf_ui_dir:
            label: Directory with ngencerf_ui
            type: string
            default: /ngencerf-app/ngencerf_ui
            hidden: true
          ngencerf_docker_dir:
            label: Directory with ngencerf_docker
            type: string
            default: /ngencerf-app/ngencerf-docker
            hidden: true
          nginx_sif:
            label: NGINX Singularity container
            type: string
            default: /ngencerf-app/singularity/nginx-unprivileged.sif
            hidden: true
          slurm_app_workers:
            label: Workers for SLURM wrapper app
            type: number
            default: 2
            hidden: true